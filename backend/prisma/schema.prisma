// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int       @id @default(autoincrement())
  username         String    @unique
  password         String
  profile          Profile?
  posts            Post[]
  comments         Comment[]
  likes            Like[]
  followers        Follow[]  @relation("followers")
  following        Follow[]  @relation("following")
  messagesSent     Message[] @relation("MessagesSent")
  messagesReceived Message[] @relation("MessagesReceived")
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Profile {
  id        Int     @id @default(autoincrement())
  bio       String?
  avatarUrl String?
  location  String?
  userId    Int     @unique
  user      User    @relation(fields: [userId], references: [id])
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(255)
  content   String?
  imageUrl  String?
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  comments  Comment[]
  likes     Like[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int

  @@unique([userId, postId]) // prevent duplicate likes
}

model Follow {
  id          Int      @id @default(autoincrement())
  follower    User     @relation("following", fields: [followerId], references: [id])
  followerId  Int
  following   User     @relation("followers", fields: [followingId], references: [id])
  followingId Int
  status      String   @default("pending") // pending, accepted, rejected
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId]) // prevent duplicate follows
}

model Message {
  id          Int      @id @default(autoincrement())
  authorId    Int
  author      User     @relation("MessagesSent", fields: [authorId], references: [id])
  recipientId Int
  recipient   User     @relation("MessagesReceived", fields: [recipientId], references: [id])
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([authorId])
  @@index([recipientId])
}

